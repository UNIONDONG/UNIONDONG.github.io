<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Linux 调试工具 on Donge Blog</title>
    <link>https://uniondong.github.io/docs/linux/linux_debug/</link>
    <description>Recent content in Linux 调试工具 on Donge Blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Sat, 20 Jan 2024 10:39:03 +0800</lastBuildDate><atom:link href="https://uniondong.github.io/docs/linux/linux_debug/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>【一文秒懂】Linux内核调试工具——devmem</title>
      <link>https://uniondong.github.io/docs/linux/linux_debug/%E4%B8%80%E6%96%87%E7%A7%92%E6%87%82linux%E5%86%85%E6%A0%B8%E8%B0%83%E8%AF%95%E5%B7%A5%E5%85%B7devmem/</link>
      <pubDate>Fri, 19 Jan 2024 21:23:10 +0800</pubDate>
      
      <guid>https://uniondong.github.io/docs/linux/linux_debug/%E4%B8%80%E6%96%87%E7%A7%92%E6%87%82linux%E5%86%85%E6%A0%B8%E8%B0%83%E8%AF%95%E5%B7%A5%E5%85%B7devmem/</guid>
      <description>【一文秒懂】Linux内核调试工具——devmem #  1、介绍 #  我们在底层开发过程中，经常需要在终端查看或者修改设备寄存器的值，有这样一个工具&amp;mdash;-devmem，可用于读取或者修改物理寄存器的值，非常方便！
简而言之，devmem就是在Linux命令行模式下，直接操作我们设备寄存器的值！
2、如何使用 #  2.1 配置devmem #  进入menuconfig选项中，按下/搜索关键词即可！
2.2、使用devmem #   进入Linux后，输入devmem -h查看帮助信息即可！
 Usage: devmem ADDRESS [WIDTH [VALUE]] Read/write from physical address ADDRESS Address to act upon WIDTH Width (8/16/...) VALUE Data to be written []内部为可选内容，比较简单，这里直接上使用代码！
 读物理内存  devmem 0x10000000	#读指定的物理内存值 devmem 0x10000000 16	#读16bit物理内存的值  写物理内存  devmem 0x10000000 32 0x00000000	#以32bit写入给定的值到指定物理内存 devmem 0x10000000 8 0x010	#以8bit写入给定的值到指定物理内存  欢迎关注【嵌入式艺术】，董哥原创！  </description>
    </item>
    
    <item>
      <title>【一文秒懂】Ftrace系统调试工具使用终极指南</title>
      <link>https://uniondong.github.io/docs/linux/linux_debug/%E4%B8%80%E6%96%87%E7%A7%92%E6%87%82ftrace%E7%B3%BB%E7%BB%9F%E8%B0%83%E8%AF%95%E5%B7%A5%E5%85%B7%E4%BD%BF%E7%94%A8%E7%BB%88%E6%9E%81%E6%8C%87%E5%8D%97/</link>
      <pubDate>Wed, 13 Dec 2023 21:56:32 +0800</pubDate>
      
      <guid>https://uniondong.github.io/docs/linux/linux_debug/%E4%B8%80%E6%96%87%E7%A7%92%E6%87%82ftrace%E7%B3%BB%E7%BB%9F%E8%B0%83%E8%AF%95%E5%B7%A5%E5%85%B7%E4%BD%BF%E7%94%A8%E7%BB%88%E6%9E%81%E6%8C%87%E5%8D%97/</guid>
      <description>【一文秒懂】Ftrace系统调试工具使用终极指南 #  1、Ftrace是什么 #  Ftrace是Function Trace的简写，由 Steven Rostedt 开发的，从 2008 年发布的内核 2.6.27 中开始就内置了。
Ftrace是一个系统内部提供的追踪工具，旨在帮助内核设计和开发人员去追踪系统内部的函数调用流程。
随着Ftrace的不断完善，除了追踪函数调用流程外，还可以用来调试和分析系统的延迟和性能问题，并发展成为一个追踪类调试工具的框架。
除了Ftrace外，追踪类调试工具还包括：
2、Ftrace的实现原理 #  为了帮助我们更好的使用Ftrace，我们有必要简单了解Ftrace的实现原理。
2.1 Ftrace框架图 #  Ftrace的框架图如下：
由框架图我们可以知道：
 ftrace包括多种类型的tracers，每个tracer完成不同的功能 将这些不同类型的tracers注册进入ftrace framework 各类tracers收集不同的信息，并放入到Ring buffer缓冲区以供调用。   2.2 Ftrace是如何记录信息的 #  Ftrace采用了静态插桩和动态插桩两种方式来实现。
静态插桩：
我们在Kernel中打开了CONFIG_FUNCTION_TRACER功能后，会增加一个-pg的一个编译选项，这个编译选项的作用就是为每个函数入口处，都会插入bl mcount跳转指令，使得每个函数运行时都会进入mcount函数。
 Ftrace一旦使能，对kernel中所有的函数插桩，这带来的性能开销是惊人的，有可能导致人们弃用Ftrace功能。
 为了解决这个问题，开发者推出了Dynamic ftrace，以此来优化整体的性能。
动态插桩：
 这里的动态，是指的动态修改函数指令。
  编译时，记录所有被添加跳转指令的函数，这里表示所有支持追踪的函数。 内核将所有跳转指令替换为nop指令，以实现非调试状态性能零损失。 根据 function tracer 设置，动态将被调试函数的nop指令，替换为跳转指令，以实现追踪。   总而言之，Ftrace记录数据可以总结为以下几个步骤：
 打开编译选项-pg，为每个函数都增加跳转指令 记录这些可追踪的函数，并为了减少性能消耗，将跳转函数替换为nop指令 通过flag标志位来动态管理，将需要追踪的函数预留的nop指令替换回追踪指令，记录调试信息。   3、如何使用Ftrace #  3.</description>
    </item>
    
    <item>
      <title>【一文秒懂】TOP命令详解</title>
      <link>https://uniondong.github.io/docs/linux/linux_debug/%E4%B8%80%E6%96%87%E7%A7%92%E6%87%82top%E5%91%BD%E4%BB%A4%E8%AF%A6%E8%A7%A3/</link>
      <pubDate>Wed, 17 Jan 2024 21:37:13 +0800</pubDate>
      
      <guid>https://uniondong.github.io/docs/linux/linux_debug/%E4%B8%80%E6%96%87%E7%A7%92%E6%87%82top%E5%91%BD%E4%BB%A4%E8%AF%A6%E8%A7%A3/</guid>
      <description>【一文秒懂】TOP命令详解 #  1、Top命令介绍 #  Linux系统中，Top命令主要用于实时运行系统的监控，包括Linux内核管理的进程或者线程的资源占用情况。
这个命令对所有正在运行的进程和系统负荷提供不断更新的概览信息，包括系统负载、CPU利用分布情况、内存使用、每个进程的内容使用情况等信息。
 2、Top命令使用 #  Top的命令介绍如下：
top -hv|-bcHiOSs -d secs -n max -u|U user -p pid -o fld -w [cols] 常用的Top指令有：
top：启动top命令 top -c：显示完整的命令行 top -b：以批处理模式显示程序信息 top -S：以累积模式显示程序信息 top -n 2：表示更新两次后终止更新显示 top -d 3：设置信息更新周期为3秒 top -p 139：显示进程号为139的进程信息，CPU、内存占用率等 top -n 10：显示更新十次后退出 除此之外，在top进程运行过程中，两个最重要的功能是查看帮助（h 或 ？）和退出（q 或 Ctrl+C）。
 3、Top信息详解 #  top展示界面由从上到下3部分组成
 概览区域 表头 任务区域 还有一个输入/消息行，位于概览区域和表头之间。  3.1 概览区详解 #  top - 14:46:08 up 5:46, 1 user, load average: 0.</description>
    </item>
    
    <item>
      <title>【一文秒懂】Linux内核调试工具——Debugfs</title>
      <link>https://uniondong.github.io/docs/linux/linux_debug/%E4%B8%80%E6%96%87%E7%A7%92%E6%87%82linux%E5%86%85%E6%A0%B8%E8%B0%83%E8%AF%95%E5%B7%A5%E5%85%B7debugfs/</link>
      <pubDate>Fri, 19 Jan 2024 21:23:44 +0800</pubDate>
      
      <guid>https://uniondong.github.io/docs/linux/linux_debug/%E4%B8%80%E6%96%87%E7%A7%92%E6%87%82linux%E5%86%85%E6%A0%B8%E8%B0%83%E8%AF%95%E5%B7%A5%E5%85%B7debugfs/</guid>
      <description>【一文秒懂】Linux内核调试工具——Debugfs #  1、介绍 #  Debugfs其存在的主要意义是为了内核开发者向用户空间传递更多有用的信息，与proc不同，proc只提供进程相关的信息；同时也与sysfs不同，sysfs对每个文件都要求一定的规则，而Debugfs没有任何的规则。
简而言之，Debugfs是一种用于内核调试的虚拟文件系统。
2、如何调试 #  2.1 配置Debugfs #  进去menuconfig选项中，按下/搜索CONFIG_DEBUG_FS关键词即可！
 当然，可以看Location在内核中的位置。
 2.2 挂载Debugfs #  mount -t debugfs none /sys/kernel/debug	#挂载 mount	#查看挂载情况 ___ none on /sys/kernel/debug type debugfs (rw,relatime) 2.3 GPIO调试 #  cat gpio gpio-43 ( |wakeup ) in lo IRQ gpio-64 ( |cd ) in lo IRQ  上述只是简单的调试GPIO的方法，而Debugfs功能远不止于此，其提供了一些API接口，方便我们在内核中Debug使用。
而我们要做的，就是在我们想要进行Debug的地方，注册debugfs接口，然后查看我们要调试的信息。
 2.4 GPIO的实现 #  文件kernel\drivers\gpio\gpiolib.c中
`static const struct file_operations gpiolib_operations = { .</description>
    </item>
    
    <item>
      <title>【一文秒懂】Linux网络性能测试工具——Iperf</title>
      <link>https://uniondong.github.io/docs/linux/linux_debug/%E4%B8%80%E6%96%87%E7%A7%92%E6%87%82linux%E7%BD%91%E7%BB%9C%E6%80%A7%E8%83%BD%E6%B5%8B%E8%AF%95%E5%B7%A5%E5%85%B7iperf/</link>
      <pubDate>Sat, 20 Jan 2024 09:47:12 +0800</pubDate>
      
      <guid>https://uniondong.github.io/docs/linux/linux_debug/%E4%B8%80%E6%96%87%E7%A7%92%E6%87%82linux%E7%BD%91%E7%BB%9C%E6%80%A7%E8%83%BD%E6%B5%8B%E8%AF%95%E5%B7%A5%E5%85%B7iperf/</guid>
      <description>【一文秒懂】Linux网络性能测试工具——Iperf #  Iperf是一个网络性能测试工具，可以测试最大TCP和UDP带宽性能，具有多种参数和UDP特性，可以根据需要调整，可以报告带宽、延迟抖动和数据包丢失。
Iperf3在NLNR/DAST开的的原始版本进行重新设计，其目标是更小、更简单的代码库，并且还提供Iperf所不具备的新功能，如：nuttcp 和netperf
iperf有Linux,Windows,android,Mac等版本，下面结合实际网络场景进行iperf工具使用的介绍
确保使用Iperf测试的服务端和客户端都处于同一局域网内！
1、Iperf环境准备 #  Iperf下载链接：推荐下载源码路径，官网下载、Github下载或者其他地址2
1.1 Linux源码安装Iperf #  以Ubuntu20.04为例，下载压缩包iperf-3.1.3.tar.gz，解压并进入目录。
tar -zxvf iperf-3.1.3.tar.gz	#解压 cd iperf-3.1.3/	#进入解压目录 mkdir linux_install_dir	#创建安装目录 ./configure	--prefix=/home/dong/WorkSpace/Program/iperf-3.1.3/linux_install_dir	#--prefix设置安装目录，即iperf3生成路径，绝对路径 make clean	#清除掉之前编译的文件，确保不影响 make	#编译 make install	#安装 进入linux_install_dir/bin安装目录，可以看到iperf3可执行文件。我们可以通过readelf -h iperf3 | grep Machine可以查看运行平台。
Machine: Advanced Micro Devices X86-64 1.2 Arm交叉编译Iperf #  以Arm平台为例，解压iperf-3.11.tar.gz，并进入目录。
tar -zxvf iperf-3.1.3.tar.gz	#解压 cd iperf-3.1.3/	#进入解压目录 mkdir arm_install_dir	#创建安装目录 ./configure --host=arm-linux-gnueabihf --prefix=/home/dong/WorkSpace/Program/iperf-3.1.3/arm_install_dir/ CFLAGS=-static# --host设置使用的编译器；	--prefix 安装目录； CFLAGS静态编译 make clean	#清除掉之前编译的文件，确保不影响 make	#编译 make install	#安装 进入arm_install_dir/bin安装目录，可以看到iperf3可执行文件。我们可以通过readelf -h iperf3 | grep Machine可以查看运行平台。</description>
    </item>
    
    <item>
      <title>【一文秒懂】Linux调试工具——GDB介绍</title>
      <link>https://uniondong.github.io/docs/linux/linux_debug/%E4%B8%80%E6%96%87%E7%A7%92%E6%87%82linux%E8%B0%83%E8%AF%95%E5%B7%A5%E5%85%B7gdb%E4%BB%8B%E7%BB%8D/</link>
      <pubDate>Sat, 20 Jan 2024 10:32:28 +0800</pubDate>
      
      <guid>https://uniondong.github.io/docs/linux/linux_debug/%E4%B8%80%E6%96%87%E7%A7%92%E6%87%82linux%E8%B0%83%E8%AF%95%E5%B7%A5%E5%85%B7gdb%E4%BB%8B%E7%BB%8D/</guid>
      <description>【一文秒懂】Linux调试工具——GDB介绍 #  1、GDB是什么 #  GDB：GNU Project Debugger是GNU工程仿真器，允许开发者能够去看程序内部发生的情况，或者发生crash时候， 知道程序正在做什么！它诞生于 GNU 计划（同时诞生的还有 GCC、Emacs 等），是 Linux 下常用的程序调试器。发展至今，GDB 已经迭代了诸多个版本，当下的 GDB 支持调试多种编程语言编写的程序，包括 C、C++、Go、Objective-C、OpenCL、Ada 等。实际场景中，GDB 更常用来调试 C 和 C++ 程序。
GDB主要功能有四个方面：
 启动程序：指定任何可以影响其运行行为的动作 停止程序：使程序在指定条件下停止 检查错误：当程序停止时，检查发生了什么 纠正错误：更改程序中的内容，纠正错误  GDB可以在本地、远程、仿真器上执行。
2、GDB如何使用 #   如何使用GDB？
 要想回答这个问题，从正统角度来分析，有两种方式：
  GDB官方手册：https://sourceware.org/gdb/
  GDB帮助信息：help all（命令行输入）
  简单来说，GDB调试方法有3种：
 直接调试：gdb [exec file]，用于直接仿真一个执行程序 附属调试：gdb attach pid，用于直接调试一个已运行的程序（ubuntu注意权限问题） 核心转存调试：gdb [exec file] [core-dump file]，用于调试core-dump文件   Tips：GDB调试的[exec file]，该文件最好编译的时候带上-g选项，生成带调试信息的可执行文件。
 3、GDB常用指令 #  3.</description>
    </item>
    
    <item>
      <title>【一文秒懂】Linux远程调试工具——gdbserver</title>
      <link>https://uniondong.github.io/docs/linux/linux_debug/%E4%B8%80%E6%96%87%E7%A7%92%E6%87%82linux%E8%BF%9C%E7%A8%8B%E8%B0%83%E8%AF%95%E5%B7%A5%E5%85%B7gdbserver/</link>
      <pubDate>Sat, 20 Jan 2024 10:34:18 +0800</pubDate>
      
      <guid>https://uniondong.github.io/docs/linux/linux_debug/%E4%B8%80%E6%96%87%E7%A7%92%E6%87%82linux%E8%BF%9C%E7%A8%8B%E8%B0%83%E8%AF%95%E5%B7%A5%E5%85%B7gdbserver/</guid>
      <description>【一文秒懂】Linux远程调试工具——gdbserver #  1、介绍 #   对于开发者来说，调试必不可少。
对于开发PC软件，通常系统已经继承了调试工具（比如Linux系统的GDB），或者IDE直接支持对程序的调试。
而对于开发嵌入式软件来说调试的手段比较有限，很多开发者仅有的调试手段依然是最原始的打印（我也是其中之一）。
当然除了打印调试之外还有通过gdb+gdbserver来调试，gdbserver在目标系统中运行，gdb则在宿主机上运行。
 简而言之，gdbserver 是一个程序，它允许宿主机可以通过网络，远程调试目标板。
2、如何使用 #  2.1 编译器准备 #   这里就不再详细讲解编译器的安装什么的了，网上一大把！
 #直接安装 sudo apt-get install gcc-arm-linux-gnueabihf	#源码安装 $ tar zxvf gdb-7.12.tar.gz $ cd gdb-7.12/ $ ./configure --target=arm-linux --prefix=$PWD/__install $ make $ make install  编译完成后，最终会生成gdbserver 的可执行程序，这个就是我们要使用的工具。
 2.2 目标机准备 #   我们将gdb_server可执行程序放置目标板上。 再将我们要调试的程序放置目标板上，如helloworld 使用gdb_server进行调试，使用方法如下：  gdbserver 192.168.xx.xx:1234 ./helloworld 192.168.xx.xx：IP地址信息
1234：自定义端口号
./helloworld：运行要仿真的程序
此时gdbserver监听端口号1234，并等待客户端连接。
2.3 宿主机准备 #   在宿主机(Ubuntu)上，使用gdb调试 远程连接目标机 运行程序  $ gdb (gdb) target remote 192.</description>
    </item>
    
    <item>
      <title>【一文秒懂】Linux内核死锁检测</title>
      <link>https://uniondong.github.io/docs/linux/linux_debug/%E4%B8%80%E6%96%87%E7%A7%92%E6%87%82linux%E5%86%85%E6%A0%B8%E6%AD%BB%E9%94%81%E6%A3%80%E6%B5%8B/</link>
      <pubDate>Sat, 20 Jan 2024 10:36:40 +0800</pubDate>
      
      <guid>https://uniondong.github.io/docs/linux/linux_debug/%E4%B8%80%E6%96%87%E7%A7%92%E6%87%82linux%E5%86%85%E6%A0%B8%E6%AD%BB%E9%94%81%E6%A3%80%E6%B5%8B/</guid>
      <description>【一文秒懂】Linux内核死锁检测 #   最近遇到了一个驱动上面的BUG，导致终端敲命令都无响应，最终导致内核触发了hung_task_timeout…
为什么会出现这种情况？该如何排查？
 1、死锁 #  死锁指两个或更多进程或线程因相互等待对方释放资源而互相阻塞，从而导致系统中所有的进程或线程都无法继续运行的情况。
一个典型的死锁场景包括以下几个角色：
 资源：系统内的某个文件、某个设备、共享的内存区域等。 进程/线程：进程或线程需要访问某个资源来完成其工作，但其当前无法取得该资源的控制权，因为该资源已被其他进程或线程占用。 饥饿：由于进程无法获取其需要的资源，它不能继续前进或完成操作。如果没有正确的措施来处理和解决死锁，进程可能会一直等待，直到设备或整个系统崩溃。   2、常见的死锁方式 #  常见死锁的2种方式：
 AA锁：包括重复上锁和上下文切换引起的上锁，即一个线程，持有A锁，还未释放，又去请求A锁 AB-BA死锁：一个F1线程，持有A锁，再去获取B锁，而一个F2线程持有B锁，再去获取A锁，这个时候处于的死锁状态  常见的死锁有以下4种情况：
 进程重复申请同一个锁，称为AA死锁。例如，重复申请同一个自旋锁；使用读写锁，第一次申请读锁，第二次申请写锁。 进程申请自旋锁时没有禁止硬中断，进程获取自旋锁以后，硬中断抢占，申请同一个自旋锁。这种AA死锁很隐蔽，人工审查很难发现。 两个进程都要获取锁L1和L2，进程1持有锁L1，再去获取锁L2，如果这个时候进程2持有锁L2并且正在尝试获取锁L1，那么进程1和进程2就会死锁，称为AB-BA死锁。 在一个处理器上进程1持有锁L1，再去获取锁L2，在另一个处理器上进程2持有锁L2，硬中断抢占进程2以后获取锁L1。这种AB-BA死锁很隐蔽，人工审查很难发现。  内核提供了Lockdep来检测死锁的异常情况
 3、Lockdep 内核配置 #   CONFIG_LOCKDEP： CONFIG_DEBUG_LOCK_ALLOC：检查内核是否错误地释放被持有的锁。 CONFIG_PROVE_LOCKING：允许内核报告死锁问题。 CONFIG_DEBUG_LOCKDEP ：在死锁发生，内核报告相应的死锁 CONFIG_LOCK_STAT：追踪锁竞争的点，解释的更详细   4、Lockdep 初探 #   lockdep操作的基本单元并非单个的锁实例，而是锁类（lock-class）。比如，struct inode结构体中的自旋锁i_lock字段就代表了这一类锁，而具体每个inode节点的锁只是该类锁中的一个实例。对所有这些实例，lockdep会把它们当作一个整体做处理，即把判断粒度放大，否则对可能有成千上万个的实例进行逐一判断，那处理难度可想而知，而且也没有必要. lockdep跟踪每个锁类的自身状态，也跟踪各个锁类之间的依赖关系，通过一系列的验证规则，以确保锁类状态和锁类之间的依赖总是正确的。另外，锁类一旦在初次使用时被注册，那么后续就会一直存在，所有它的具体实例都会关联到它。  锁的几个状态：
 ever held in STATE context –&amp;gt; 该锁曾在STATE上下文被持有过 ever head as readlock in STATE context –&amp;gt; 该锁曾在STATE上下文被以读锁形式持有过 ever head with STATE enabled –&amp;gt; 该锁曾在启用STATE的情况下被持有过 ever head as readlock with STATE enabled –&amp;gt; 该锁曾在启用STATE的情况下被以读锁形式持有过   5、Lockdep 检查规则 #  单锁状态规则如下： （1）一个软中断不安全的锁类也是硬中断不安全的锁类。</description>
    </item>
    
    <item>
      <title>【一文秒懂】如何生成core Dump文件</title>
      <link>https://uniondong.github.io/docs/linux/linux_debug/%E4%B8%80%E6%96%87%E7%A7%92%E6%87%82%E5%A6%82%E4%BD%95%E7%94%9F%E6%88%90core-dump%E6%96%87%E4%BB%B6/</link>
      <pubDate>Sat, 20 Jan 2024 10:38:03 +0800</pubDate>
      
      <guid>https://uniondong.github.io/docs/linux/linux_debug/%E4%B8%80%E6%96%87%E7%A7%92%E6%87%82%E5%A6%82%E4%BD%95%E7%94%9F%E6%88%90core-dump%E6%96%87%E4%BB%B6/</guid>
      <description> 我的圈子：高级工程师聚集地  创作理念：专注分享高质量嵌入式文章，让大家读有所得！  &amp;nbsp; 亲爱的读者，你好：  感谢你对我的专栏的关注和支持，我很高兴能和你分享我的知识和经验。如果你喜欢我的内容，想要阅读更多的精彩技术文章，可以扫码加入我的社群。
  欢迎关注【嵌入式艺术】，董哥原创！  </description>
    </item>
    
    <item>
      <title>【一文秒懂】Linux之Core Dump文件详解</title>
      <link>https://uniondong.github.io/docs/linux/linux_debug/%E4%B8%80%E6%96%87%E7%A7%92%E6%87%82linux%E4%B9%8Bcore-dump%E6%96%87%E4%BB%B6%E8%AF%A6%E8%A7%A3/</link>
      <pubDate>Sat, 20 Jan 2024 10:38:42 +0800</pubDate>
      
      <guid>https://uniondong.github.io/docs/linux/linux_debug/%E4%B8%80%E6%96%87%E7%A7%92%E6%87%82linux%E4%B9%8Bcore-dump%E6%96%87%E4%BB%B6%E8%AF%A6%E8%A7%A3/</guid>
      <description> 我的圈子：高级工程师聚集地  创作理念：专注分享高质量嵌入式文章，让大家读有所得！  &amp;nbsp; 亲爱的读者，你好：  感谢你对我的专栏的关注和支持，我很高兴能和你分享我的知识和经验。如果你喜欢我的内容，想要阅读更多的精彩技术文章，可以扫码加入我的社群。
  欢迎关注【嵌入式艺术】，董哥原创！  </description>
    </item>
    
    <item>
      <title>【一文秒懂】Linux内核态内存泄露检测工具</title>
      <link>https://uniondong.github.io/docs/linux/linux_debug/%E4%B8%80%E6%96%87%E7%A7%92%E6%87%82linux%E5%86%85%E6%A0%B8%E6%80%81%E5%86%85%E5%AD%98%E6%B3%84%E9%9C%B2%E6%A3%80%E6%B5%8B%E5%B7%A5%E5%85%B7/</link>
      <pubDate>Sat, 20 Jan 2024 10:39:03 +0800</pubDate>
      
      <guid>https://uniondong.github.io/docs/linux/linux_debug/%E4%B8%80%E6%96%87%E7%A7%92%E6%87%82linux%E5%86%85%E6%A0%B8%E6%80%81%E5%86%85%E5%AD%98%E6%B3%84%E9%9C%B2%E6%A3%80%E6%B5%8B%E5%B7%A5%E5%85%B7/</guid>
      <description>【一文秒懂】Linux内核态内存泄露检测工具 #  1、Kmemleak介绍 #  在Linux内核开发中，Kmemleak是一种用于检测内核中内存泄漏的工具。
 内存泄漏指的是程序中已经不再使用的内存没有被妥善地释放，导致内存的浪费。内核中的内存泄漏同样会导致系统性能下降、系统崩溃等问题。
 Kmemleak能够检测内核中的内存泄漏，通过检测内核中未被释放但又无法找到其使用位置的内存，进一步定位、修复内存泄漏的问题。
 在用户空间，我们常用Valgrind来检测；
在内核空间，我们常用Kmemleak来检测。
  2、如何使用Kmemleak #  2.1 内核配置 #  内核打开相应配置：
 CONFIG_DEBUG_KMEMLEAK：Kmemleak被加入到内核 CONFIG_DEBUG_KMEMLEAK_EARLY_LOG_SIZE设置为16000：该参数为记录内存泄露信息的内存池，越大记录信息越多。 CONFIG_DEBUG_KMEMLEAK_DEFAULT_OFF ：Kmemleak默认开关状态  依赖的配置：
 CONFIG_DEBUG_KERNEL：打开内核调试功能 CONFIG_DEBUG_FS：需要借助到debugfs CONFIG_STACKTRACE：记录进程的堆栈信息   2.2 用户空间配置 #  我们要想使用Kmemleak，需要挂在debugfs，来查看泄露的情况。
 进入文件系统后，进行挂载：  mount -t debugfs nodev /sys/kernel/debug/	#	挂在debugfs  设置扫描时间：  echo scan=10 &amp;gt; /sys/kernel/debug/kmemleak	#	10S扫描一次  默认内存泄露检测时间为10min，上面设置为10s一次
  查看泄露情况：  cat /sys/kernel/debug/kmemleak	#	查看内存泄露情况  其他指令：  echo scan &amp;gt; /sys/kernel/debug/kmemleak	#触发一次扫描 echo clear &amp;gt; /sys/kernel/debug/kmemleak #清除当前 kmemleak 记录的泄露信息 echo off &amp;gt; /sys/kernel/debug/kmemleak #关闭kmemleak（不可逆转的） echo stack=off &amp;gt; /sys/kernel/debug/kmemleak #关闭任务栈扫描 echo stack=on &amp;gt; /sys/kernel/debug/kmemleak #使能任务栈扫描 echo scan=on &amp;gt; /sys/kernel/debug/kmemleak #启动自动内存扫描线程 echo scan=off &amp;gt; /sys/kernel/debug/kmemleak #停止自动内存扫描线程 echo scan=&amp;lt;secs&amp;gt; &amp;gt; /sys/kernel/debug/kmemleak#设置自动扫描线程扫描间隔，默认是600，设置0则是停止扫描 echo dump=&amp;lt;addr&amp;gt; &amp;gt; /sys/kernel/debug/kmemleak #dump某个地址的内存块信息，比如上面的echo dump=0xffffffc008efd200 &amp;gt; /sys/kernel/debug/kmemleak即可查看详细信息  2.</description>
    </item>
    
  </channel>
</rss>
